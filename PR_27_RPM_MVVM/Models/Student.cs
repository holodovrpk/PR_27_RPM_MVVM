// -----------------------------------------------------------------------------
// Пространства имён (using) — это как “адреса библиотек”, которые мы подключаем.
// Они позволяют использовать готовые классы и типы данных из .NET Framework.
// -----------------------------------------------------------------------------
using System;               // Содержит базовые типы .NET (int, double, string и т.д.)
using System.Collections.Generic;  // Для работы с коллекциями (List, Dictionary и т.п.) — может пригодиться позже.
using System.Linq;           // LINQ — мощный инструмент для выборки и фильтрации данных.
using System.Text;           // Для работы с текстом и кодировками (Encoding) — не используется здесь напрямую.
using System.Threading.Tasks; // Для асинхронного программирования — тоже пока не используется.
using System.Xml.Linq;       // Для работы с XML-файлами (например, если решишь сохранять студентов в XML).

// -----------------------------------------------------------------------------
// Пространство имён проекта. Оно обычно совпадает с именем папки в структуре.
// Здесь Models — значит, что это часть слоя “МОДЕЛЬ” (данные, сущности, логика хранения).
// -----------------------------------------------------------------------------
namespace PR_27_RPM_MVVM.Models
{
    // =========================================================================
    // КЛАСС Student — модель данных одного студента.
    // =========================================================================
    // Этот класс описывает, какие свойства (поля) есть у студента.
    // Он не содержит логики — только данные.
    // Такие классы ещё называют “DTO” (Data Transfer Object) или “POCO” (Plain Old CLR Object),
    // т.е. простые объекты, которые просто хранят информацию.
    //
    // В паттерне MVVM такие классы живут в папке Models и используются:
    //  - для отображения данных в интерфейсе (через DataGrid, TextBox и т.д.),
    //  - для сериализации/десериализации (сохранение/загрузка из JSON или XML),
    //  - для передачи данных между окнами или ViewModel’ами.
    // =========================================================================
    public class Student
    {
        // ---------------------------------------------------------------------
        // СВОЙСТВА КЛАССА — открытые данные, с которыми работает приложение.
        // ---------------------------------------------------------------------
        // В C# свойства состоят из “геттера” (get) и “сеттера” (set):
        //  - get возвращает значение,
        //  - set присваивает новое значение.
        // Ключевое слово “public” делает их доступными для всех других классов проекта.
        // ---------------------------------------------------------------------

        // Имя студента. Тип string, потому что это текстовые данные.
        // Например: "Анна" или "Борис".
        // Эти данные могут вводиться пользователем в TextBox.
        public string Name { get; set; }

        // Возраст студента. Целое число.
        // Например: 19, 20, 21.
        // Можно будет использовать для сортировки или фильтрации.
        public int Age { get; set; }

        // Номер группы, в которой учится студент.
        // Тип string, потому что могут встречаться группы вроде "П-21" или "IT-302".
        public string Group { get; set; }

        // Средний балл студента.
        // Используется тип double, чтобы можно было хранить дробные значения (например, 4.7).
        public double Grade { get; set; }

        // Адрес электронной почты.
        // Это тоже строка, потому что e-mail содержит символы, а не числа.
        // Например: "student@mail.com"
        public string Email { get; set; }

        // ---------------------------------------------------------------------
        // Примечание:
        // Автосвойства (синтаксис { get; set; }) создают “невидимое” приватное поле,
        // куда сохраняется значение. Компилятор делает это автоматически.
        //
        // Если нужно добавить логику (например, проверку формата e-mail),
        // можно заменить автосвойство на полноценное:
        //
        // private string email;
        // public string Email
        // {
        //     get { return email; }
        //     set
        //     {
        //         if (value.Contains("@"))
        //             email = value;
        //     }
        // }
        // ---------------------------------------------------------------------
    }
}
