<!-- 
    ГЛАВНОЕ ОКНО ПРИЛОЖЕНИЯ "Учёт студентов"
    =========================================
    Это View-часть (представление) в паттерне MVVM.
    Здесь нет логики программы — только визуальное описание интерфейса
    и привязки (Binding), соединяющие элементы с данными из ViewModel.
-->
<!-- xmlns:vm="clr-namespace:PR_27_RPM_MVVM.ViewModels" Пространство имён, где хранится MainViewModel -->
<Window x:Class="PR_27_RPM_MVVM.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="clr-namespace:PR_27_RPM_MVVM"
    xmlns:vm="clr-namespace:PR_27_RPM_MVVM.ViewModels" 
    mc:Ignorable="d"
    Title="Учёт студентов"
    Width="500" Height="400">

    <!-- 
        Определяем источник данных для этого окна.
        Здесь DataContext = новый экземпляр MainViewModel.
        Это значит, что все {Binding ...} внутри окна будут "смотреть"
        на свойства и команды из MainViewModel.
    -->
    <Window.DataContext>
        <vm:MainViewModel/>
    </Window.DataContext>

    <!-- 
        GRID — это главный контейнер разметки.
        Он делит окно на строки (и при необходимости — столбцы).
        Здесь мы создаём три строки:
        1. Таблица (DataGrid)
        2. Панель с деталями выбранного студента
        3. Панель с кнопками управления
    -->
    <Grid Margin="15">

        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <!-- Первая строка: занимает всё оставшееся пространство (таблица) -->
            <RowDefinition Height="Auto"/>
            <!-- Вторая строка: высота по содержимому (детали) -->
            <RowDefinition Height="Auto"/>
            <!-- Третья строка: кнопки -->
        </Grid.RowDefinitions>

        <!-- ============================================================= -->
        <!--  🟦 ТАБЛИЦА СО СТУДЕНТАМИ (DataGrid)                          -->
        <!-- ============================================================= -->
        <!-- DataGrid автоматически отображает коллекцию студентов (Students)
             из MainViewModel. Каждый объект Student — это строка таблицы. -->
        
        <!-- Источник данных — коллекция Students -->
        <!-- Привязка выделенной строки к свойству SelectedStudent -->
        <!-- Не генерировать столбцы автоматически -->
        <!-- Разрешаем редактирование ячеек, если нужно -->
        <!-- Размещаем таблицу в первой строке сетки -->
        <DataGrid 
            ItemsSource="{Binding Students}"                
            SelectedItem="{Binding SelectedStudent, Mode=TwoWay}" 
            AutoGenerateColumns="False"           
            IsReadOnly="False"         
            Grid.Row="0"       
            Margin="0,0,0,10">
            <!-- Отступ снизу -->

            <!-- Определяем вручную, какие столбцы показывать -->
            <DataGrid.Columns>
                <!-- Имя студента -->
                <DataGridTextColumn Header="Имя" Binding="{Binding Name}" Width="*"/>
                <!-- Возраст -->
                <DataGridTextColumn Header="Возраст" Binding="{Binding Age}" Width="100"/>
                <!-- Группа -->
                <DataGridTextColumn Header="Группа" Binding="{Binding Group}" Width="100"/>
            </DataGrid.Columns>
        </DataGrid>

        <!-- ============================================================= -->
        <!--  🟩 ДЕТАЛИ ВЫБРАННОГО СТУДЕНТА                                -->
        <!-- ============================================================= -->
        <!-- Этот блок показывает дополнительные поля (балл и e-mail)
             для студента, выделенного в таблице выше. -->
        <StackPanel 
            Orientation="Horizontal" 
            Grid.Row="1" 
            Margin="0,10,0,10">

            <!-- Первая колонка (балл) -->
            <StackPanel Margin="0,0,10,0">
                <TextBlock Text="Средний балл:"/>
                <!-- Привязка к SelectedStudent.Grade (значение выделенного студента) -->
                <TextBox 
                    Width="100" 
                    Text="{Binding SelectedStudent.Grade, Mode=OneWay}" 
                    IsReadOnly="True"/>
                <!-- Только для просмотра -->
            </StackPanel>
            

            <!-- Вторая колонка (email) -->
            <StackPanel>
                <TextBlock Text="E-mail:"/>
                <!-- Привязка к SelectedStudent.Email -->
                <TextBox 
                    Width="200" 
                    Text="{Binding SelectedStudent.Email, Mode=OneWay}" 
                    IsReadOnly="True"/>
            </StackPanel>
        </StackPanel>

        <!-- ============================================================= -->
        <!--  🟧 КНОПКИ "Добавить" и "Удалить"                            -->
        <!-- ============================================================= -->
        <!-- Обе кнопки связаны с командами (AddCommand и DeleteCommand)
             из MainViewModel. Благодаря этому, логика полностью отделена
             от интерфейса — никаких Click-обработчиков здесь нет! -->
        <StackPanel 
            Orientation="Horizontal" 
            Grid.Row="2" 
            HorizontalAlignment="Right">
           
            <!-- Кнопка "Добавить" -->
            <!-- Привязка к команде AddCommand -->
            <Button 
                Content="Добавить"          
                Command="{Binding AddCommand}"
               
                Width="120" Margin="5"/>

                <!-- Кнопка "Удалить" -->
                <!-- Привязка к команде DeleteCommand -->
                <Button 
                Content="Удалить" 
                Command="{Binding DeleteCommand}" 
                Width="120" Margin="5"
                Background="#C62828"
                Foreground="White"/>

        </StackPanel>
    </Grid>
</Window>
