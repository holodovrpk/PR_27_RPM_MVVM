// Подключаем пространство имён, где находится класс Student.
// Этот класс описывает структуру одного объекта "Студент" (модель данных).
using PR_27_RPM_MVVM.Models;

// Подключаем стандартные пространства имён из .NET
using System;
using System.Collections.ObjectModel;     // Коллекция, которая уведомляет интерфейс об изменениях (ObservableCollection)
using System.ComponentModel;              // Нужна для реализации интерфейса INotifyPropertyChanged
using System.Runtime.CompilerServices;    // Содержит атрибут [CallerMemberName]
using System.Windows;                     // Для работы с MessageBox (диалоги)
using PR_27_RPM_MVVM.Views;               // Подключаем папку Views, чтобы использовать окно AddStudentWindow

// Все классы, относящиеся к логике приложения (ViewModel), лежат в этом пространстве имён
namespace PR_27_RPM_MVVM.ViewModels
{
    // Класс MainViewModel — это "мозг" главного окна.
    // Он хранит данные, которые нужно показывать пользователю (список студентов),
    // и команды, которые можно выполнять (добавить, удалить и т.д.)
    // -----------------------------------------------------------
    // Класс реализует интерфейс INotifyPropertyChanged —
    // это ключевой элемент механизма Binding в WPF.
    // Благодаря ему View (окно) "узнаёт", что в данных что-то изменилось,
    // и автоматически обновляет элементы интерфейса.
    public class MainViewModel : INotifyPropertyChanged
    {
        // ------------------------------------------------------------------------------
        // 1 КОЛЛЕКЦИЯ ДАННЫХ
        // ------------------------------------------------------------------------------

        // Коллекция студентов, которая отображается в DataGrid.
        // ObservableCollection — это особый тип коллекции:
        //  - если добавить элемент → интерфейс обновится автоматически;
        //  - если удалить элемент → строка исчезнет из таблицы;
        //  - если заменить элемент → таблица тоже обновится.
        // Это намного удобнее, чем обычный List<> при работе с UI.
        public ObservableCollection<Student> Students { get; set; }

        // ------------------------------------------------------------------------------
        // 2 КОМАНДЫ
        // ------------------------------------------------------------------------------

        // Команды — это “замена” событий Click в MVVM.
        // Вместо кода в окне (MainWindow.xaml.cs), кнопки теперь вызывают команды.
        // RelayCommand — это универсальный класс, реализующий интерфейс ICommand.
        // Он знает, как проверить доступность команды (CanExecute)
        // и как выполнить действие (Execute).
        public RelayCommand AddCommand { get; }      // Команда для кнопки "Добавить"
        public RelayCommand DeleteCommand { get; }   // Команда для кнопки "Удалить"

        // ------------------------------------------------------------------------------
        // 3 ВЫБРАННЫЙ ЭЛЕМЕНТ
        // ------------------------------------------------------------------------------

        // Это свойство хранит объект студента, который сейчас выделен в таблице.
        // Благодаря привязке SelectedItem="{Binding SelectedStudent}"
        // WPF автоматически записывает сюда выбранную строку DataGrid.
        private Student selectedStudent;
        public Student SelectedStudent
        {
            // Когда WPF или код хочет узнать, кто сейчас выбран — вызывается get
            get => selectedStudent;

            // Когда пользователь кликает по строке в DataGrid — вызывается set
            // Мы сохраняем выбранного студента и уведомляем интерфейс об изменении.
            set
            {
                selectedStudent = value;
                OnPropertyChanged(); //  Сообщаем Binding-системе, что значение свойства поменялось
            }
        }
        

        // ------------------------------------------------------------------------------
        // 4 КОНСТРУКТОР ViewModel
        // ------------------------------------------------------------------------------

        // Конструктор выполняется один раз — при запуске программы.
        // Здесь мы создаём коллекцию, добавляем тестовые данные и создаём команды.
        public MainViewModel()
        {
            // Создаём новую коллекцию студентов.
            // В реальном приложении данные могли бы загружаться из файла или базы данных.
            Students = new ObservableCollection<Student>
            {
                // Добавляем два примера студентов, чтобы таблица не была пустой при запуске.
                new Student { Name = "Анна", Age = 20, Group = "226", Grade = 4.8, Email = "anna@mail.com" },
                new Student { Name = "Борис", Age = 19, Group = "227", Grade = 4.5, Email = "boris@mail.com" }
            };

            // --------------------------------------------------------------------------
            // СОЗДАНИЕ КОМАНД
            // --------------------------------------------------------------------------

            // Команда "Добавить":
            // 1-й параметр — действие (метод AddStudent), которое нужно выполнить при нажатии.
            // 2-й параметр — условие, при котором команда активна (здесь не указано => кнопка всегда активна).
            AddCommand = new RelayCommand(_ => AddStudent());

            // Команда "Удалить":
            // Выполняет метод DeleteStudent().
            // Второй параметр (CanExecute): команда активна только если кто-то выбран в таблице.
            DeleteCommand = new RelayCommand(_ => DeleteStudent(), _ => SelectedStudent != null);
        }

        // ------------------------------------------------------------------------------
        // 5 МЕТОД ДОБАВЛЕНИЯ
        // ------------------------------------------------------------------------------

        // Этот метод вызывается, когда пользователь нажимает кнопку "Добавить".
        // Он открывает отдельное окно AddStudentWindow, где вводятся данные нового студента.
        private void AddStudent()
        {
            // Создаём новый объект Student — временное хранилище для данных.
            // В это хранилище будут записаны значения, введённые пользователем.
            Student NewStudent = new Student();

            // Создаём окно добавления и связываем его с объектом NewStudent.
            // DataContext = NewStudent означает, что все поля TextBox в окне AddStudentWindow
            // автоматически "привязаны" к свойствам Name, Age, Group, Grade, Email этого объекта.
            AddStudentWindow addWindow = new AddStudentWindow() { DataContext = NewStudent };

            // Открываем окно как диалог (модально) — пользователь должен его закрыть,
            // прежде чем можно будет снова работать с главным окном.
            // Метод ShowDialog() возвращает true, если пользователь нажал кнопку "ОК" в этом окне.
            if (addWindow.ShowDialog() == true)
            {
                // Если пользователь подтвердил ввод — добавляем нового студента в коллекцию.
                // После добавления ObservableCollection автоматически уведомит DataGrid,
                // и таблица мгновенно обновится.
                Students.Add(NewStudent);
            }
        }

        // ------------------------------------------------------------------------------
        // 6 МЕТОД УДАЛЕНИЯ
        // ------------------------------------------------------------------------------

        // Этот метод вызывается, когда нажата кнопка "Удалить".
        // Он удаляет выбранного студента из коллекции, предварительно спросив подтверждение.
        private void DeleteStudent()
        {
            // Если пользователь не выбрал строку в таблице — просто выходим.
            if (SelectedStudent == null) return;

            // Показываем диалоговое окно с вопросом.
            // MessageBox.Show() возвращает результат выбора пользователя (Yes или No).
            var result = MessageBox.Show(
                $"Удалить студента {SelectedStudent.Name}?",   // текст вопроса
                "Подтверждение удаления",                     // заголовок окна
                MessageBoxButton.YesNo,                       // какие кнопки показать
                MessageBoxImage.Question);                    // иконка вопроса

            // Если пользователь выбрал "Да" — удаляем этого студента из коллекции.
            // Так как используется ObservableCollection, DataGrid сразу обновится.
            if (result == MessageBoxResult.Yes)
                Students.Remove(SelectedStudent);
        }

        // ------------------------------------------------------------------------------
        // 7 INotifyPropertyChanged — уведомление интерфейса об изменениях
        // ------------------------------------------------------------------------------

        // Это событие определяет стандартный механизм уведомлений в WPF.
        // Каждый раз, когда в ViewModel меняется свойство,
        // вызывается событие PropertyChanged, и WPF автоматически обновляет View.
        public event PropertyChangedEventHandler PropertyChanged;

        // Метод для вызова события PropertyChanged.
        // Его вызывают все свойства, когда нужно "сказать интерфейсу":
        //   “У меня изменилось значение — обнови, пожалуйста, экран!”
        //
        // [CallerMemberName] — атрибут, который позволяет не писать имя свойства вручную.
        // Компилятор сам подставляет имя свойства, из которого был вызван этот метод.
        // Пример:
        //     OnPropertyChanged();   // автоматически поймёт, что изменилось SelectedStudent
        void OnPropertyChanged([CallerMemberName] string name = null)
        {
            // Проверяем, есть ли подписчики на событие (обычно это система Binding в WPF).
            // Если есть — создаём объект PropertyChangedEventArgs с именем изменённого свойства
            // и уведомляем всех подписчиков.
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
    }
}
