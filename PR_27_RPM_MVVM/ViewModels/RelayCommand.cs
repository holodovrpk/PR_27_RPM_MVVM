using System;
using System.Windows.Input;

namespace PR_27_RPM_MVVM.ViewModels
{
    // =========================================================================
    // КЛАСС RelayCommand
    // =========================================================================
    // Универсальная реализация интерфейса ICommand.
    // ICommand — стандартный интерфейс в WPF, который позволяет элементам управления
    // (например, Button, MenuItem) вызывать команды, описанные во ViewModel.
    //
    // MVVM-паттерн использует команды вместо событий Click, чтобы логика
    // находилась во ViewModel, а не в коде окна.
    // =========================================================================
    public class RelayCommand : ICommand
    {
        // ---------------------------------------------------------------------
        // 1️⃣ Поля для хранения логики команды
        // ---------------------------------------------------------------------

        // 'execute' — это действие (метод), которое должно выполняться,
        // когда пользователь вызывает команду (например, нажимает кнопку).
        // Тип Action<object> означает, что метод может принимать один параметр (object)
        // или работать без него (если параметр не нужен).
        private readonly Action<object> execute;

        // 'canExecute' — это функция, которая определяет, можно ли выполнить команду
        // в данный момент. Например:
        //   — нельзя удалить студента, если он не выбран;
        //   — нельзя сохранить файл, если данных нет.
        //
        // Возвращает bool: true — команда доступна, false — недоступна.
        private readonly Func<object, bool> canExecute;

        // ---------------------------------------------------------------------
        // 2️⃣ Конструктор
        // ---------------------------------------------------------------------
        // Конструктор принимает два параметра:
        //  - exec  — метод, выполняемый при вызове команды (обязателен);
        //  - canExec — метод, проверяющий доступность команды (необязателен).
        //
        // Если canExec не передан, команда всегда доступна (по умолчанию).
        // ---------------------------------------------------------------------
        public RelayCommand(Action<object> exec, Func<object, bool> canExec = null)
        {
            // Сохраняем переданные методы во внутренние поля.
            // Эти делегаты будут вызываться системой WPF при проверке и выполнении команды.
            execute = exec;
            canExecute = canExec;
        }

        // ---------------------------------------------------------------------
        // 3️⃣ Метод CanExecute
        // ---------------------------------------------------------------------
        // Проверяет, можно ли сейчас выполнить команду.
        // Этот метод WPF вызывает автоматически, чтобы понять,
        // активна ли кнопка (например, кнопка Delete — неактивна, если ничего не выбрано).
        //
        // parameter — это объект, который может быть передан из XAML (например, выбранный элемент).
        //
        // Если метод canExecute не указан (null) → команда всегда возвращает true.
        // ---------------------------------------------------------------------
        public bool CanExecute(object parameter)
        {
            return canExecute == null || canExecute(parameter);
        }

        // ---------------------------------------------------------------------
        // 4️⃣ Метод Execute
        // ---------------------------------------------------------------------
        // Выполняет основное действие команды.
        // Этот метод вызывается, когда пользователь, например, нажимает кнопку,
        // связанную с этой командой (Command="{Binding AddCommand}").
        //
        // parameter — это объект, который можно передать в команду (чаще всего null).
        // ---------------------------------------------------------------------
        public void Execute(object parameter)
        {
            execute(parameter); // вызывает метод, переданный в конструкторе
        }

        // ---------------------------------------------------------------------
        // 5️⃣ Событие CanExecuteChanged
        // ---------------------------------------------------------------------
        // Это событие сообщает системе WPF, что состояние команды изменилось.
        // Например: раньше нельзя было удалить (кнопка была неактивна),
        // а теперь можно (кнопка должна стать активной).
        //
        // В обычном приложении можно было бы вызывать это событие вручную,
        // но в WPF уже есть встроенный механизм CommandManager.RequerySuggested,
        // который периодически "спрашивает" все команды:
        //   — "Вы теперь доступны или нет?"
        //
        // Поэтому мы просто подписываемся и отписываемся от этого события.
        // ---------------------------------------------------------------------
        public event EventHandler CanExecuteChanged
        {
            add => CommandManager.RequerySuggested += value;  // добавить обработчик
            remove => CommandManager.RequerySuggested -= value;  // удалить обработчик
        }
    }
}
